<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <PreFlow name="PreFlow">
        <Request>
            <Step>
                <Name>spike-arrest</Name>
                <!-- 
                    If x-skip-spike-arrest is set to the correct value, then skip the policy.
                    This is necessary for Service Callouts to this proxy where you have to set this specific header.
                -->
                <Condition>request.header.x-skip-spike-arrest != "replace with something random"</Condition>
            </Step>
            <Step>
                <Name>verify-api-key</Name>
                <Condition>request.verb != "OPTIONS"</Condition>
            </Step>
            <Step>
                <Name>developer-quota</Name>
                <Condition>request.verb != "OPTIONS"</Condition>
            </Step>
            <Step>
                <Name>set-original-request-verb</Name>
                <Condition>request.verb != "OPTIONS"</Condition>
            </Step>
            <Step>
                <Name>get-loggly-token</Name>
            </Step>
        </Request>
        <Response/>
    </PreFlow>
    <Flows>
        <Flow name="OptionsPreFlight">
            <Request>
                <Step>
                    <Name>add-cors-headers</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>request.verb = "OPTIONS"</Condition>
        </Flow>
        <Flow name="StocksInfo">
            <Description>retrieve stock info</Description>
            <Request>
                <Step>
                    <Name>stock-info-extract-params</Name>
                </Step>
                <Step>
                    <Name>FC-generic-parameter-check</Name>
                </Step>
                <Step>
                    <Name>stock-info-target-path-and-params</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>stock-info-transform-response</Name>
                    <Condition>response.status.code = 200</Condition>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/stocks/*/info") and (originalRequestVerb = "GET")</Condition>
        </Flow>
        <Flow name="IndexStocks">
            <Description>retrieve stocks for index</Description>
            <Request>
                <Step>
                    <Name>index-stocks-extract-params</Name>
                </Step>
                <Step>
                    <Name>FC-generic-parameter-check</Name>
                </Step>
                <Step>
                    <Name>index-stocks-default-values</Name>
                </Step>
                <Step>
                    <Name>index-stocks-target-path-and-payload</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>index-stocks-transform-response</Name>
                    <Condition>response.status.code = 200</Condition>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/index/*/stocks") and (originalRequestVerb = "GET")</Condition>
        </Flow>
        <Flow name="StocksPrices">
            <Description>retrieve price history for stock</Description>
            <Request>
                <Step>
                    <Name>price-history-extract-params</Name>
                </Step>
                <Step>
                    <Name>FC-generic-parameter-check</Name>
                </Step>
                <Step>
                    <Name>price-history-default-values</Name>
                </Step>
                <Step>
                    <Name>price-history-target-path-and-params</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>lc-stock-info</Name>
                </Step>
                <Step>
                    <Name>get-stock-info</Name>
                    <Condition>lookupcache.lc-stock-info.cachehit = "false"</Condition>
                </Step>
                <Step>
                    <Name>pc-stock-info</Name>
                    <Condition>lookupcache.lc-stock-info.cachehit = "false"</Condition>
                </Step>
                <Step>
                    <Name>stocks-prices-transform-response</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/stocks/*/prices") and (originalRequestVerb = "GET")</Condition>
        </Flow>
    </Flows>
    <PostFlow name="PostFlow">
        <Request/>
        <Response>
            <Step>
                <Name>FC-optional-json-to-xml</Name>
                <Condition>request.verb != "OPTIONS"</Condition>
            </Step>
            <Step>
                <Name>collect-stats</Name>
            </Step>
        </Response>
    </PostFlow>
    <PostClientFlow>
        <Step/>
        <Response>
            <Step>
                <Name>final-logging</Name>
            </Step>
        </Response>
    </PostClientFlow>
    <FaultRules>
        <FaultRule name="verify-api-key-failed">
            <Step>
                <Name>fault-rule-no-x-api-key-header</Name>
                <Condition>request.header.x-api-key = null</Condition>
            </Step>
            <Step>
                <Name>fault-rule-invalid-x-api-key-header</Name>
                <!-- 
                    without this complementary condition the step would always be executed 
                    and overwrite the previous' step's response 
                -->
                <Condition>request.header.x-api-key != null</Condition>
            </Step>
            <Condition>oauthV2.verify-api-key.failed = "true"</Condition>
        </FaultRule>
    </FaultRules>
    <HTTPProxyConnection>
        <BasePath>/boerse-frankfurt-de/v1/</BasePath>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="nullRoute">
        <Condition>request.verb = "OPTIONS"</Condition>
    </RouteRule>
    <RouteRule name="default">
        <TargetEndpoint>default</TargetEndpoint>
    </RouteRule>
</ProxyEndpoint>